Steps followed to create the project:

create package.json file

go to the root folder and run the command

```npm init```

run the command to install protractor locally

```npm install protractor```
note: latest protractor version should have added to the dependencies in the package.json file by now.

define the other dependencies needed for the project in the 'package.json' file

ref: https://github.com/angular/protractor/blob/master/exampleTypescript/package.json

run the command ```npm install``` to fetch all the dependencies to the node-modules folder

Next step: after introducing page objects and the project run independently. 
Instead of accessing protractor installed globaly in the local env, after following the below steps, the project will use protractor installed locally in the node_modules

Add the following to the package.json

 "scripts": {
    "test": "protractor JSFiles/config.js",
    "pretest": "tsc",
    "protractor": "./node_modules/protractor/built/cli.js",
    "webdriver-update": "./node_modules/.bin/webdriver-manager update"
  }

  Commands to run

  ``` npm run webdriver-update```
  ```npm run test```

  Extend the framework to use cucumber 
      ref: https://github.com/protractor-cucumber-framework/protractor-cucumber-framework

      create the cucumber-config.ts file
      Add dependencies to the package.json file

        
      change 1 ( add  "cucumbertest": "protractor JSFiles/cucumber-config.js", to the scripts object)

      ```
      "scripts": {
        "test": "protractor JSFiles/config.js",
        "pretest": "tsc",
        "cucumbertest": "protractor JSFiles/cucumber-config.js",
        "protractor": "./node_modules/protractor/built/cli.js",
        "webdriver-update": "./node_modules/.bin/webdriver-manager update"
      },
      ```

      change 2 (following dependencies are to be fetched to the node-modules folder)
      ```
      "protractor-cucumber-framework": "^6.2.1",
        "cucumber": "^6.0.5",
        "@types/cucumber": "4.0.4",
        "chai": "^4.2.0",
        "chai-as-promised": "^7.1.1"
      ```

  After the above changes to the script object in package.json ,
  need to run cucumber feature files as: 
  
  ```tsc``` //to compile typescript files to .js files
  ```npm run cucumbertest```
  
  Else, 
  
  we will have to replace the script to be as below, 
  ```
   "scripts": {
        "test": "protractor JSFiles/cucumber-config.js",

  ```
  And then no need of running ```tsc``` command before ```npm run test```
  pretest and test are identified as standard commands to node.


  Adopt chai assertion library to use with Cucumber, add it as a dependency to package.json.
  Test assertion syntax help https://www.chaijs.com/

  ---------------------------------
  Using cucumber tags to filter tests

  Add the tag to the scenario (in the .feature file)
  Add the specific tag(s) needs to be run to the cucumber-config.ts file (to the cucumberOpts object)
  the usual command ```npm run test``` will only execute the tests with the matching tag name

 
 Ref: https://github.com/cucumber/cucumber-js

  ----------------------------------
  using cucumber hooks to synchronize the order of tests 

  Mostly used hooks are 'before' and 'after' in collab with tags
  new typescript file is created in the step definitions folder (anywhere to list down with step definitions) 
  Add the hooks.ts file path to the cucumber-config.ts file (to the cucumberOpts object's 'require' field)

  ------------------------------------------------
  Add cucumber HTML reporting  
  Ref: https://www.npmjs.com/package/cucumber-html-reporter

Add the cucumber-html-reporter dependency to package.json and ```npm install``` to fetch the dependency package to node_modules folder.

Add 'format' key to the 'cucumberOpts' object of the config file.
Add reporter.generate method (from cucumber-html-reporter plugin ) to the callback function -> ``` onComplete: () =>{..... ``` .
Test reports will be generated in the 'test_reports' folder

--------------------------------------------------------
Get screenshot and add to the report
Just add the After function to step definitions with a condition to capture screen when scenario returned the Failed status.

Lesson learned: https://github.com/cucumber/cucumber-js/issues/937#issuecomment-332782734 provided somehelp to 
figure out => function is not working when reffered to the current instance of the scenario object.


-----------------------------------------------------------------------------
Integrate with Jenkins (local Jenkins automation server)

- Install jenkins Ref: https://www.jenkins.io/doc/pipeline/tour/getting-started/
- start  Jenkins, following the steps in the Guided Tour for getting started (I used powershell - run as administrator)
- Copy the protractor automation test project  to .jenkins folder in (c:/user/<username>)
- go to localhost:<portnumber> and follow the initial set up steps then Click on 'New Item' start by adding a name for the job.
- Select 'Freestyle project' and 'Save'
- General tab - open 'advanced' config field , select Use custom workspace and add the Protractor automation project path to 'Display Name' filed
- Build Tab -> Execute Windows batch command
                  ```npm install```
        -> Add Build step
                  ```npm run webdriver-update```
        -> Add build step
                  ```npm run test```
- select 'build now' of the created jenkins job
- to see the test report go to project 'Workspace' and select the 'test_reports' folder

Next improvement steps:
  - run chrome headless
  - automate build trigger on commit
  - get github plugin and automate build trigger commits to the github repository
  - more reading https://www.jenkins.io/doc/book/getting-started/












